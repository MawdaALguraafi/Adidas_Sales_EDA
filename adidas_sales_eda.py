# -*- coding: utf-8 -*-
"""Adidas Sales EDA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-_Z8TnzbFWmZCI-8pn00WAqYI_r3rQpJ

### Project: Adidas Sales EDA
# Date: 2025-09-13

**Contents**
1. Exploratory Data Analysis (EDA)  
2. Data Cleaning  
3. Build the Dashboard

### Phase 1 - Exploratory Data Analysis (EDA)
"""

# Import pandas library
import pandas as pd
import matplotlib.pyplot as plt


# Read the Excel file into a DataFrame
df = pd.read_csv("/content/data_sales(1).csv")

# Display the first 5 rows of the dataset
df.head()

# Display a random sample of 10 rows
df.sample(10)

# Check dataset shape (rows, columns)
df.shape

# Check data types of each column
df.dtypes

# Check for missing values in each column
df.isnull().sum()

# Check for duplicate rows in the dataset
df.duplicated()

# Check for duplicate rows
df.describe()

"""
### Phase 2 - Data Cleaning"""

# Data Cleaning: Remove rows with missing values in "Price per Unit"
df.dropna(subset = "Price per Unit", inplace = True)

# Delete rows where "Units Sold" is 0
df = df[df["Units Sold"] != 0]

# Print the new shape of the dataframe after deleting rows
print(df.shape)

# Verify again if there are missing values
df.isna().sum()

# Convert Invoice Date to datetime
df['Invoice Date'] = pd.to_datetime(df['Invoice Date'])

# Create Month column as datetime (start of month)
df['Month'] = df['Invoice Date'].dt.to_period('M').dt.to_timestamp()

# Create Year column as datetime (start of year)
df['Year'] = df['Invoice Date'].dt.to_period('Y').dt.to_timestamp()


# Clean money columns: remove $ and , then convert to float
money_cols = ["Price per Unit", "Total Sales", "Operating Profit"]
for col in money_cols:
    df[col] = df[col].replace(r'[\$,]', '', regex=True).astype(float)

# Clean Units Sold: remove commas and convert to integer
df["Units Sold"] = df["Units Sold"].replace(',', '', regex=True).astype(int)


# Convert Retailer ID to integer
df["Retailer ID"] = df["Retailer ID"].astype(int)

# Show column types
df.dtypes

# Quick stats
df.describe()

# Show first 5 records
df.head()

df.describe()

df.dtypes

"""Visualization

"""

# Calculate and plot total sales by region
region_sales = df.groupby("Region")["Total Sales"].sum().sort_values(ascending=False)
print(region_sales)

# Plot
region_sales.plot(
    kind="bar",
    figsize=(6,4),
    title="Total Sales by Region",
    color='#001F54',
)
plt.ylabel("Total Sales")
plt.show()

# Calculate and plot monthly sales trend
monthly_sales = df.groupby("Month")["Total Sales"].sum()

monthly_sales.plot(
    kind="line",
    marker="o",
    figsize=(8,5),
    title="Monthly Sales Trend",
    color='#001F54',

)
plt.ylabel("Total Sales")
plt.xlabel("Month")
plt.show()

# Save cleaned data
df.to_csv("/content/cleaned_data_sales.csv", index=False)

"""### Phase 3 - Dashbored"""

!pip install streamlit pandas plotly pyngrok

# Commented out IPython magic to ensure Python compatibility.
# # Creating a Python file
# %%writefile dashboard.py
# 
# # Import necessary libraries
# import streamlit as st  # Streamlit library for dashboard UI
# import pandas as pd      # Pandas for data manipulation
# import matplotlib.pyplot as plt  # Matplotlib for plotting charts
# from matplotlib.ticker import StrMethodFormatter  # For formatting y-axis numbers
# import numpy as np       # Numpy for numerical operations
# 
# # Page settings
# st.set_page_config(
#     page_title="Adidas Dashboard",  # Title of the web page
#     layout="wide"                   # Wide layout to use full screen width
# )
# 
# # Apply custom CSS styling for dark theme
# st.markdown("""
# <style>
# body { background-color: #0A0A0A; color: #E0E1DD; }
# .sidebar .sidebar-content { background-color: #0D1B2A; color: #E0E1DD; }
# </style>
# """, unsafe_allow_html=True)
# 
# # Load dataset
# df = pd.read_csv("cleaned_data_sales.csv")
# 
# # Sidebar: Filters and dataset information
# st.sidebar.header("Filters & Dataset Info")
# 
# # Show a brief description of the dataset
# st.sidebar.markdown("Dataset Description")
# st.sidebar.markdown("""
# This dataset contains Adidas sales data including:
# - Region, State, City
# - Product, Units Sold
# - Total Sales, Operating Profit
# - Sales Method (Online /   In-Store/Outlet)
# """)
# st.sidebar.markdown("Filters")
# # Sidebar filter options
# regions = ["All"] + sorted(df["Region"].unique())
# methods = ["All"] + sorted(df["Sales Method"].unique())
# years = ["All"] + sorted(df["Year"].unique())
# 
# # Sidebar select boxes for filtering
# selected_region = st.sidebar.selectbox("Select Region", regions)
# selected_method = st.sidebar.selectbox("Select Sales Method", methods)
# selected_year = st.sidebar.selectbox("Select Year", years)
# 
# # Apply filters without modifying the original dataframe
# filtered_df = df.copy()
# if selected_region != "All":
#     filtered_df = filtered_df[filtered_df["Region"] == selected_region]
# if selected_method != "All":
#     filtered_df = filtered_df[filtered_df["Sales Method"] == selected_method]
# if selected_year != "All":
#     filtered_df = filtered_df[filtered_df["Year"] == selected_year]
# 
# # Page header: Logo and title
# col_logo, col_title = st.columns([1, 4])
# with col_logo:
#     st.image("/content/adidas.png", width=120)  # Display logo
# with col_title:
#     st.title("Adidas Sales Dashboard")  # Dashboard title
# 
# # KPI Metrics
# top_product_name = filtered_df.groupby("Product")["Units Sold"].sum().idxmax()  # Find top product
# col1, col2, col3, col4 = st.columns(4)
# col1.metric("Total Sales", f"${filtered_df['Total Sales'].sum():,.0f}")  # Total sales
# col2.metric("Total Profit", f"${filtered_df['Operating Profit'].sum():,.0f}")  # Total profit
# col3.metric("Total Units Sold", f"{filtered_df['Units Sold'].sum():,}")  # Total units sold
# col4.markdown(f"""
# Top Product:
# <div style='font-size:20px; line-height:1.2; white-space: pre-wrap; word-wrap: break-word;'>{top_product_name}</div>
# """, unsafe_allow_html=True)  # Display top product with text wrapping
# 
# # Define chart colors
# chart_colors = ['#1E3A8A', '#2563EB', '#3B82F6', '#60A5FA', '#93C5FD', '#BFDBFE', '#E0F2FE']
# 
# # First row: Overview charts
# row1_col1, row1_col2 = st.columns(2)
# 
# # Monthly Sales Line Chart
# with row1_col1:
#     st.markdown("Monthly Sales (by Year & Month)")
# 
#     filtered_df['Invoice Date'] = pd.to_datetime(filtered_df['Invoice Date'])  # Convert date column
#     filtered_df['YearMonth'] = filtered_df['Invoice Date'].dt.strftime('%b %Y')  # Create Year-Month column
# 
#     monthly_sales = filtered_df.groupby('YearMonth')['Total Sales'].sum().reset_index()  # Aggregate sales
#     monthly_sales['Date'] = pd.to_datetime(monthly_sales['YearMonth'])  # For sorting
#     monthly_sales = monthly_sales.sort_values('Date')
# 
#     fig, ax = plt.subplots()
#     fig.patch.set_facecolor("none")
#     ax.set_facecolor("none")
#     ax.plot(monthly_sales['YearMonth'], monthly_sales['Total Sales'], color=chart_colors[2], linewidth=4, marker='o')  # Plot line
#     ax.set_xlabel("Month-Year", color="#FFFFFF")
#     ax.set_ylabel("Total Sales ($)", color="#FFFFFF")
#     plt.xticks(rotation=45, ha="right", fontsize=9, color="#FFFFFF")
#     plt.yticks(color="#FFFFFF")
#     for spine in ax.spines.values():  # Remove chart borders
#         spine.set_visible(False)
#     st.pyplot(fig)
# 
# # Profit by Region Bar Chart
# with row1_col2:
#     st.markdown("Profit by Region")
#     profit_region = filtered_df.groupby('Region')['Operating Profit'].sum()  # Group by region
#     fig, ax = plt.subplots()
#     fig.patch.set_facecolor("none")
#     ax.set_facecolor("none")
#     bar_colors = chart_colors[:len(profit_region)]
#     ax.bar(profit_region.index, profit_region.values, color=bar_colors, edgecolor='none')  # Draw bar chart
#     ax.set_xlabel("Region", color="#FFFFFF")
#     ax.set_ylabel("Profit ($)", color="#FFFFFF")
#     ax.tick_params(axis='x', colors="#FFFFFF")
#     ax.tick_params(axis='y', colors="#FFFFFF")
#     ax.yaxis.set_major_formatter(StrMethodFormatter('{x:,.0f}'))  # Format y-axis
#     for spine in ax.spines.values():
#         spine.set_visible(False)
#     st.pyplot(fig)
# 
# # Second row: Detailed charts
# row2_col1, row2_col2 = st.columns(2)
# 
# # Top Products by Units Sold
# with row2_col1:
#     st.markdown("Top Products by Units Sold")
#     top_products = filtered_df.groupby("Product")["Units Sold"].sum().sort_values(ascending=False).head(10)  # Top 10
#     fig, ax = plt.subplots(figsize=(9, 10))
#     fig.patch.set_facecolor("none")
#     ax.set_facecolor("none")
#     bar_colors = chart_colors[:len(top_products)]
#     ax.barh(top_products.index[::-1], top_products.values[::-1], color=bar_colors, edgecolor='none')  # Horizontal bars
#     ax.set_xlabel("Units Sold", color="#FFFFFF", fontsize=10)
#     ax.set_ylabel("Product", color="#FFFFFF", fontsize=14)
#     ax.tick_params(axis='x', colors="#FFFFFF", labelsize=12)
#     ax.tick_params(axis='y', colors="#FFFFFF", labelsize=12)
#     for spine in ax.spines.values():
#         spine.set_visible(False)
#     st.pyplot(fig)
# 
# # Profit by Sales Method Pie Chart
# with row2_col2:
#     st.markdown("Profit by Sales Method")
#     profit_method = filtered_df.groupby('Sales Method')['Operating Profit'].sum()  # Group profit by method
#     fig, ax = plt.subplots()
#     fig.patch.set_facecolor("none")
#     ax.set_facecolor("none")
#     pie_colors = chart_colors[:len(profit_method)]
#     ax.pie(profit_method.values, labels=profit_method.index, autopct='%1.1f%%', startangle=90, colors=pie_colors,
#            textprops={'color': "#FFFFFF"})  # Draw pie chart
#     ax.axis('equal')  # Keep circle
#     for spine in ax.spines.values():
#         spine.set_visible(False)
#     st.pyplot(fig)
# 
# # Summary statistics
# st.markdown("Summary Statistics")
# st.write(filtered_df.describe())  # Show descriptive statistics
# 
# # Data table preview
# st.markdown("Data Preview")
# st.dataframe(filtered_df.head(10))  # Show interactive table
#

#Setup the ngrok authentication in Colab
# ngrok is a tool that creates a secure public URL for your local server or app.
!ngrok authtoken 32edrE8gMonr0iyLKaqGbDirAM4_eJQoaPJCrF9atFT68eSk

# Import the pyngrok library to manage ngrok tunnels in Python
from pyngrok import ngrok

# Kill any previous tunnels
ngrok.kill()

# Start a new ngrok tunnel on port 8501 (default Streamlit port)
url = ngrok.connect(8501)

# Print the public URL to open in browser
print(f"Streamlit app is live at: {url}")

# Run Streamlit in the background
!streamlit run dashboard.py &>/dev/null &